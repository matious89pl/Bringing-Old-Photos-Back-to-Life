/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.everis.rec.validation.log.model.impl;

import com.everis.rec.validation.log.model.ValidationLog;
import com.everis.rec.validation.log.model.ValidationLogModel;
import com.everis.rec.validation.log.model.ValidationLogSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ValidationLog service. Represents a row in the &quot;validation_log&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ValidationLogModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ValidationLogImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ValidationLogImpl
 * @generated
 */
@JSON(strict = true)
public class ValidationLogModelImpl
	extends BaseModelImpl<ValidationLog> implements ValidationLogModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a validation log model instance should use the <code>ValidationLog</code> interface instead.
	 */
	public static final String TABLE_NAME = "validation_log";

	public static final Object[][] TABLE_COLUMNS = {
		{"validationLogId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"createDate", Types.TIMESTAMP},
		{"fileName", Types.VARCHAR}, {"uploadedBy", Types.VARCHAR},
		{"uploadedFrom", Types.VARCHAR}, {"folderId", Types.BIGINT},
		{"logReason", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("validationLogId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("fileName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("uploadedBy", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("uploadedFrom", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("folderId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("logReason", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table validation_log (validationLogId LONG not null primary key,companyId LONG,groupId LONG,createDate DATE null,fileName VARCHAR(75) null,uploadedBy VARCHAR(75) null,uploadedFrom VARCHAR(75) null,folderId LONG,logReason VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table validation_log";

	public static final String ORDER_BY_JPQL =
		" ORDER BY validationLog.validationLogId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY validation_log.validationLogId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long VALIDATIONLOGID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static ValidationLog toModel(ValidationLogSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ValidationLog model = new ValidationLogImpl();

		model.setValidationLogId(soapModel.getValidationLogId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setGroupId(soapModel.getGroupId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setFileName(soapModel.getFileName());
		model.setUploadedBy(soapModel.getUploadedBy());
		model.setUploadedFrom(soapModel.getUploadedFrom());
		model.setFolderId(soapModel.getFolderId());
		model.setLogReason(soapModel.getLogReason());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<ValidationLog> toModels(ValidationLogSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ValidationLog> models = new ArrayList<ValidationLog>(
			soapModels.length);

		for (ValidationLogSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public ValidationLogModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _validationLogId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setValidationLogId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _validationLogId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ValidationLog.class;
	}

	@Override
	public String getModelClassName() {
		return ValidationLog.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ValidationLog, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ValidationLog, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ValidationLog, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ValidationLog)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ValidationLog, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ValidationLog, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ValidationLog)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ValidationLog, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ValidationLog, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, ValidationLog>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			ValidationLog.class.getClassLoader(), ValidationLog.class,
			ModelWrapper.class);

		try {
			Constructor<ValidationLog> constructor =
				(Constructor<ValidationLog>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<ValidationLog, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ValidationLog, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ValidationLog, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<ValidationLog, Object>>();
		Map<String, BiConsumer<ValidationLog, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<ValidationLog, ?>>();

		attributeGetterFunctions.put(
			"validationLogId", ValidationLog::getValidationLogId);
		attributeSetterBiConsumers.put(
			"validationLogId",
			(BiConsumer<ValidationLog, Long>)ValidationLog::setValidationLogId);
		attributeGetterFunctions.put("companyId", ValidationLog::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<ValidationLog, Long>)ValidationLog::setCompanyId);
		attributeGetterFunctions.put("groupId", ValidationLog::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<ValidationLog, Long>)ValidationLog::setGroupId);
		attributeGetterFunctions.put(
			"createDate", ValidationLog::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<ValidationLog, Date>)ValidationLog::setCreateDate);
		attributeGetterFunctions.put("fileName", ValidationLog::getFileName);
		attributeSetterBiConsumers.put(
			"fileName",
			(BiConsumer<ValidationLog, String>)ValidationLog::setFileName);
		attributeGetterFunctions.put(
			"uploadedBy", ValidationLog::getUploadedBy);
		attributeSetterBiConsumers.put(
			"uploadedBy",
			(BiConsumer<ValidationLog, String>)ValidationLog::setUploadedBy);
		attributeGetterFunctions.put(
			"uploadedFrom", ValidationLog::getUploadedFrom);
		attributeSetterBiConsumers.put(
			"uploadedFrom",
			(BiConsumer<ValidationLog, String>)ValidationLog::setUploadedFrom);
		attributeGetterFunctions.put("folderId", ValidationLog::getFolderId);
		attributeSetterBiConsumers.put(
			"folderId",
			(BiConsumer<ValidationLog, Long>)ValidationLog::setFolderId);
		attributeGetterFunctions.put("logReason", ValidationLog::getLogReason);
		attributeSetterBiConsumers.put(
			"logReason",
			(BiConsumer<ValidationLog, String>)ValidationLog::setLogReason);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getValidationLogId() {
		return _validationLogId;
	}

	@Override
	public void setValidationLogId(long validationLogId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_validationLogId = validationLogId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public String getFileName() {
		if (_fileName == null) {
			return "";
		}
		else {
			return _fileName;
		}
	}

	@Override
	public void setFileName(String fileName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fileName = fileName;
	}

	@JSON
	@Override
	public String getUploadedBy() {
		if (_uploadedBy == null) {
			return "";
		}
		else {
			return _uploadedBy;
		}
	}

	@Override
	public void setUploadedBy(String uploadedBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uploadedBy = uploadedBy;
	}

	@JSON
	@Override
	public String getUploadedFrom() {
		if (_uploadedFrom == null) {
			return "";
		}
		else {
			return _uploadedFrom;
		}
	}

	@Override
	public void setUploadedFrom(String uploadedFrom) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uploadedFrom = uploadedFrom;
	}

	@JSON
	@Override
	public long getFolderId() {
		return _folderId;
	}

	@Override
	public void setFolderId(long folderId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_folderId = folderId;
	}

	@JSON
	@Override
	public String getLogReason() {
		if (_logReason == null) {
			return "";
		}
		else {
			return _logReason;
		}
	}

	@Override
	public void setLogReason(String logReason) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_logReason = logReason;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), ValidationLog.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ValidationLog toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ValidationLog>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ValidationLogImpl validationLogImpl = new ValidationLogImpl();

		validationLogImpl.setValidationLogId(getValidationLogId());
		validationLogImpl.setCompanyId(getCompanyId());
		validationLogImpl.setGroupId(getGroupId());
		validationLogImpl.setCreateDate(getCreateDate());
		validationLogImpl.setFileName(getFileName());
		validationLogImpl.setUploadedBy(getUploadedBy());
		validationLogImpl.setUploadedFrom(getUploadedFrom());
		validationLogImpl.setFolderId(getFolderId());
		validationLogImpl.setLogReason(getLogReason());

		validationLogImpl.resetOriginalValues();

		return validationLogImpl;
	}

	@Override
	public int compareTo(ValidationLog validationLog) {
		int value = 0;

		if (getValidationLogId() < validationLog.getValidationLogId()) {
			value = -1;
		}
		else if (getValidationLogId() > validationLog.getValidationLogId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ValidationLog)) {
			return false;
		}

		ValidationLog validationLog = (ValidationLog)object;

		long primaryKey = validationLog.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<ValidationLog> toCacheModel() {
		ValidationLogCacheModel validationLogCacheModel =
			new ValidationLogCacheModel();

		validationLogCacheModel.validationLogId = getValidationLogId();

		validationLogCacheModel.companyId = getCompanyId();

		validationLogCacheModel.groupId = getGroupId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			validationLogCacheModel.createDate = createDate.getTime();
		}
		else {
			validationLogCacheModel.createDate = Long.MIN_VALUE;
		}

		validationLogCacheModel.fileName = getFileName();

		String fileName = validationLogCacheModel.fileName;

		if ((fileName != null) && (fileName.length() == 0)) {
			validationLogCacheModel.fileName = null;
		}

		validationLogCacheModel.uploadedBy = getUploadedBy();

		String uploadedBy = validationLogCacheModel.uploadedBy;

		if ((uploadedBy != null) && (uploadedBy.length() == 0)) {
			validationLogCacheModel.uploadedBy = null;
		}

		validationLogCacheModel.uploadedFrom = getUploadedFrom();

		String uploadedFrom = validationLogCacheModel.uploadedFrom;

		if ((uploadedFrom != null) && (uploadedFrom.length() == 0)) {
			validationLogCacheModel.uploadedFrom = null;
		}

		validationLogCacheModel.folderId = getFolderId();

		validationLogCacheModel.logReason = getLogReason();

		String logReason = validationLogCacheModel.logReason;

		if ((logReason != null) && (logReason.length() == 0)) {
			validationLogCacheModel.logReason = null;
		}

		return validationLogCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ValidationLog, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ValidationLog, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ValidationLog, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((ValidationLog)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<ValidationLog, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<ValidationLog, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ValidationLog, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((ValidationLog)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ValidationLog>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _validationLogId;
	private long _companyId;
	private long _groupId;
	private Date _createDate;
	private String _fileName;
	private String _uploadedBy;
	private String _uploadedFrom;
	private long _folderId;
	private String _logReason;

	public <T> T getColumnValue(String columnName) {
		Function<ValidationLog, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((ValidationLog)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("validationLogId", _validationLogId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("fileName", _fileName);
		_columnOriginalValues.put("uploadedBy", _uploadedBy);
		_columnOriginalValues.put("uploadedFrom", _uploadedFrom);
		_columnOriginalValues.put("folderId", _folderId);
		_columnOriginalValues.put("logReason", _logReason);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("validationLogId", 1L);

		columnBitmasks.put("companyId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("createDate", 8L);

		columnBitmasks.put("fileName", 16L);

		columnBitmasks.put("uploadedBy", 32L);

		columnBitmasks.put("uploadedFrom", 64L);

		columnBitmasks.put("folderId", 128L);

		columnBitmasks.put("logReason", 256L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private ValidationLog _escapedModel;

}