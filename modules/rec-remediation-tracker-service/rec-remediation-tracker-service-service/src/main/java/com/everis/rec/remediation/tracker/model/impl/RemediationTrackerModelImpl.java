/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.everis.rec.remediation.tracker.model.impl;

import com.everis.rec.remediation.tracker.model.RemediationTracker;
import com.everis.rec.remediation.tracker.model.RemediationTrackerModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the RemediationTracker service. Represents a row in the &quot;REC_RemediationTracker&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>RemediationTrackerModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RemediationTrackerImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see RemediationTrackerImpl
 * @generated
 */
public class RemediationTrackerModelImpl
	extends BaseModelImpl<RemediationTracker>
	implements RemediationTrackerModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a remediation tracker model instance should use the <code>RemediationTracker</code> interface instead.
	 */
	public static final String TABLE_NAME = "REC_RemediationTracker";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"remediationTrackerId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"title", Types.VARCHAR}, {"orgSiteId", Types.BIGINT},
		{"specificParty", Types.VARCHAR}, {"category", Types.VARCHAR},
		{"description", Types.VARCHAR}, {"dueDate", Types.VARCHAR},
		{"dueDateFormated", Types.TIMESTAMP}, {"status", Types.VARCHAR},
		{"calendarBookingId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("remediationTrackerId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("orgSiteId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("specificParty", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("category", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dueDate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dueDateFormated", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("calendarBookingId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table REC_RemediationTracker (uuid_ VARCHAR(75) null,remediationTrackerId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,title VARCHAR(75) null,orgSiteId LONG,specificParty VARCHAR(75) null,category VARCHAR(75) null,description VARCHAR(500) null,dueDate VARCHAR(75) null,dueDateFormated DATE null,status VARCHAR(75) null,calendarBookingId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table REC_RemediationTracker";

	public static final String ORDER_BY_JPQL =
		" ORDER BY remediationTracker.title ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY REC_RemediationTracker.title ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long STATUS_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long TITLE_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public RemediationTrackerModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _remediationTrackerId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRemediationTrackerId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _remediationTrackerId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return RemediationTracker.class;
	}

	@Override
	public String getModelClassName() {
		return RemediationTracker.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<RemediationTracker, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<RemediationTracker, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RemediationTracker, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((RemediationTracker)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<RemediationTracker, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<RemediationTracker, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(RemediationTracker)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<RemediationTracker, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<RemediationTracker, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, RemediationTracker>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			RemediationTracker.class.getClassLoader(), RemediationTracker.class,
			ModelWrapper.class);

		try {
			Constructor<RemediationTracker> constructor =
				(Constructor<RemediationTracker>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<RemediationTracker, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<RemediationTracker, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<RemediationTracker, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<RemediationTracker, Object>>();
		Map<String, BiConsumer<RemediationTracker, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<RemediationTracker, ?>>();

		attributeGetterFunctions.put("uuid", RemediationTracker::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<RemediationTracker, String>)
				RemediationTracker::setUuid);
		attributeGetterFunctions.put(
			"remediationTrackerId",
			RemediationTracker::getRemediationTrackerId);
		attributeSetterBiConsumers.put(
			"remediationTrackerId",
			(BiConsumer<RemediationTracker, Long>)
				RemediationTracker::setRemediationTrackerId);
		attributeGetterFunctions.put("groupId", RemediationTracker::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<RemediationTracker, Long>)
				RemediationTracker::setGroupId);
		attributeGetterFunctions.put(
			"companyId", RemediationTracker::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<RemediationTracker, Long>)
				RemediationTracker::setCompanyId);
		attributeGetterFunctions.put("userId", RemediationTracker::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<RemediationTracker, Long>)
				RemediationTracker::setUserId);
		attributeGetterFunctions.put(
			"userName", RemediationTracker::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<RemediationTracker, String>)
				RemediationTracker::setUserName);
		attributeGetterFunctions.put(
			"createDate", RemediationTracker::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<RemediationTracker, Date>)
				RemediationTracker::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", RemediationTracker::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<RemediationTracker, Date>)
				RemediationTracker::setModifiedDate);
		attributeGetterFunctions.put("title", RemediationTracker::getTitle);
		attributeSetterBiConsumers.put(
			"title",
			(BiConsumer<RemediationTracker, String>)
				RemediationTracker::setTitle);
		attributeGetterFunctions.put(
			"orgSiteId", RemediationTracker::getOrgSiteId);
		attributeSetterBiConsumers.put(
			"orgSiteId",
			(BiConsumer<RemediationTracker, Long>)
				RemediationTracker::setOrgSiteId);
		attributeGetterFunctions.put(
			"specificParty", RemediationTracker::getSpecificParty);
		attributeSetterBiConsumers.put(
			"specificParty",
			(BiConsumer<RemediationTracker, String>)
				RemediationTracker::setSpecificParty);
		attributeGetterFunctions.put(
			"category", RemediationTracker::getCategory);
		attributeSetterBiConsumers.put(
			"category",
			(BiConsumer<RemediationTracker, String>)
				RemediationTracker::setCategory);
		attributeGetterFunctions.put(
			"description", RemediationTracker::getDescription);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<RemediationTracker, String>)
				RemediationTracker::setDescription);
		attributeGetterFunctions.put("dueDate", RemediationTracker::getDueDate);
		attributeSetterBiConsumers.put(
			"dueDate",
			(BiConsumer<RemediationTracker, String>)
				RemediationTracker::setDueDate);
		attributeGetterFunctions.put(
			"dueDateFormated", RemediationTracker::getDueDateFormated);
		attributeSetterBiConsumers.put(
			"dueDateFormated",
			(BiConsumer<RemediationTracker, Date>)
				RemediationTracker::setDueDateFormated);
		attributeGetterFunctions.put("status", RemediationTracker::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<RemediationTracker, String>)
				RemediationTracker::setStatus);
		attributeGetterFunctions.put(
			"calendarBookingId", RemediationTracker::getCalendarBookingId);
		attributeSetterBiConsumers.put(
			"calendarBookingId",
			(BiConsumer<RemediationTracker, Long>)
				RemediationTracker::setCalendarBookingId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@Override
	public long getRemediationTrackerId() {
		return _remediationTrackerId;
	}

	@Override
	public void setRemediationTrackerId(long remediationTrackerId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_remediationTrackerId = remediationTrackerId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_title = title;
	}

	@Override
	public long getOrgSiteId() {
		return _orgSiteId;
	}

	@Override
	public void setOrgSiteId(long orgSiteId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_orgSiteId = orgSiteId;
	}

	@Override
	public String getSpecificParty() {
		if (_specificParty == null) {
			return "";
		}
		else {
			return _specificParty;
		}
	}

	@Override
	public void setSpecificParty(String specificParty) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_specificParty = specificParty;
	}

	@Override
	public String getCategory() {
		if (_category == null) {
			return "";
		}
		else {
			return _category;
		}
	}

	@Override
	public void setCategory(String category) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_category = category;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_description = description;
	}

	@Override
	public String getDueDate() {
		if (_dueDate == null) {
			return "";
		}
		else {
			return _dueDate;
		}
	}

	@Override
	public void setDueDate(String dueDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dueDate = dueDate;
	}

	@Override
	public Date getDueDateFormated() {
		return _dueDateFormated;
	}

	@Override
	public void setDueDateFormated(Date dueDateFormated) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dueDateFormated = dueDateFormated;
	}

	@Override
	public String getStatus() {
		if (_status == null) {
			return "";
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalStatus() {
		return getColumnOriginalValue("status");
	}

	@Override
	public long getCalendarBookingId() {
		return _calendarBookingId;
	}

	@Override
	public void setCalendarBookingId(long calendarBookingId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_calendarBookingId = calendarBookingId;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(RemediationTracker.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), RemediationTracker.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public RemediationTracker toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, RemediationTracker>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RemediationTrackerImpl remediationTrackerImpl =
			new RemediationTrackerImpl();

		remediationTrackerImpl.setUuid(getUuid());
		remediationTrackerImpl.setRemediationTrackerId(
			getRemediationTrackerId());
		remediationTrackerImpl.setGroupId(getGroupId());
		remediationTrackerImpl.setCompanyId(getCompanyId());
		remediationTrackerImpl.setUserId(getUserId());
		remediationTrackerImpl.setUserName(getUserName());
		remediationTrackerImpl.setCreateDate(getCreateDate());
		remediationTrackerImpl.setModifiedDate(getModifiedDate());
		remediationTrackerImpl.setTitle(getTitle());
		remediationTrackerImpl.setOrgSiteId(getOrgSiteId());
		remediationTrackerImpl.setSpecificParty(getSpecificParty());
		remediationTrackerImpl.setCategory(getCategory());
		remediationTrackerImpl.setDescription(getDescription());
		remediationTrackerImpl.setDueDate(getDueDate());
		remediationTrackerImpl.setDueDateFormated(getDueDateFormated());
		remediationTrackerImpl.setStatus(getStatus());
		remediationTrackerImpl.setCalendarBookingId(getCalendarBookingId());

		remediationTrackerImpl.resetOriginalValues();

		return remediationTrackerImpl;
	}

	@Override
	public int compareTo(RemediationTracker remediationTracker) {
		int value = 0;

		value = getTitle().compareTo(remediationTracker.getTitle());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof RemediationTracker)) {
			return false;
		}

		RemediationTracker remediationTracker = (RemediationTracker)object;

		long primaryKey = remediationTracker.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<RemediationTracker> toCacheModel() {
		RemediationTrackerCacheModel remediationTrackerCacheModel =
			new RemediationTrackerCacheModel();

		remediationTrackerCacheModel.uuid = getUuid();

		String uuid = remediationTrackerCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			remediationTrackerCacheModel.uuid = null;
		}

		remediationTrackerCacheModel.remediationTrackerId =
			getRemediationTrackerId();

		remediationTrackerCacheModel.groupId = getGroupId();

		remediationTrackerCacheModel.companyId = getCompanyId();

		remediationTrackerCacheModel.userId = getUserId();

		remediationTrackerCacheModel.userName = getUserName();

		String userName = remediationTrackerCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			remediationTrackerCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			remediationTrackerCacheModel.createDate = createDate.getTime();
		}
		else {
			remediationTrackerCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			remediationTrackerCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			remediationTrackerCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		remediationTrackerCacheModel.title = getTitle();

		String title = remediationTrackerCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			remediationTrackerCacheModel.title = null;
		}

		remediationTrackerCacheModel.orgSiteId = getOrgSiteId();

		remediationTrackerCacheModel.specificParty = getSpecificParty();

		String specificParty = remediationTrackerCacheModel.specificParty;

		if ((specificParty != null) && (specificParty.length() == 0)) {
			remediationTrackerCacheModel.specificParty = null;
		}

		remediationTrackerCacheModel.category = getCategory();

		String category = remediationTrackerCacheModel.category;

		if ((category != null) && (category.length() == 0)) {
			remediationTrackerCacheModel.category = null;
		}

		remediationTrackerCacheModel.description = getDescription();

		String description = remediationTrackerCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			remediationTrackerCacheModel.description = null;
		}

		remediationTrackerCacheModel.dueDate = getDueDate();

		String dueDate = remediationTrackerCacheModel.dueDate;

		if ((dueDate != null) && (dueDate.length() == 0)) {
			remediationTrackerCacheModel.dueDate = null;
		}

		Date dueDateFormated = getDueDateFormated();

		if (dueDateFormated != null) {
			remediationTrackerCacheModel.dueDateFormated =
				dueDateFormated.getTime();
		}
		else {
			remediationTrackerCacheModel.dueDateFormated = Long.MIN_VALUE;
		}

		remediationTrackerCacheModel.status = getStatus();

		String status = remediationTrackerCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			remediationTrackerCacheModel.status = null;
		}

		remediationTrackerCacheModel.calendarBookingId = getCalendarBookingId();

		return remediationTrackerCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<RemediationTracker, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<RemediationTracker, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RemediationTracker, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((RemediationTracker)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<RemediationTracker, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<RemediationTracker, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RemediationTracker, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((RemediationTracker)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, RemediationTracker>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private long _remediationTrackerId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _title;
	private long _orgSiteId;
	private String _specificParty;
	private String _category;
	private String _description;
	private String _dueDate;
	private Date _dueDateFormated;
	private String _status;
	private long _calendarBookingId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<RemediationTracker, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((RemediationTracker)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put(
			"remediationTrackerId", _remediationTrackerId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("title", _title);
		_columnOriginalValues.put("orgSiteId", _orgSiteId);
		_columnOriginalValues.put("specificParty", _specificParty);
		_columnOriginalValues.put("category", _category);
		_columnOriginalValues.put("description", _description);
		_columnOriginalValues.put("dueDate", _dueDate);
		_columnOriginalValues.put("dueDateFormated", _dueDateFormated);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("calendarBookingId", _calendarBookingId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("remediationTrackerId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("title", 256L);

		columnBitmasks.put("orgSiteId", 512L);

		columnBitmasks.put("specificParty", 1024L);

		columnBitmasks.put("category", 2048L);

		columnBitmasks.put("description", 4096L);

		columnBitmasks.put("dueDate", 8192L);

		columnBitmasks.put("dueDateFormated", 16384L);

		columnBitmasks.put("status", 32768L);

		columnBitmasks.put("calendarBookingId", 65536L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private RemediationTracker _escapedModel;

}