/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.everis.cproposal.model.impl;

import com.everis.cproposal.model.recFormArticle;
import com.everis.cproposal.model.recFormArticleModel;
import com.everis.cproposal.model.recFormArticleSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the recFormArticle service. Represents a row in the &quot;CPROPOSAL_recFormArticle&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>recFormArticleModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link recFormArticleImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see recFormArticleImpl
 * @generated
 */
@JSON(strict = true)
public class recFormArticleModelImpl
	extends BaseModelImpl<recFormArticle> implements recFormArticleModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a rec form article model instance should use the <code>recFormArticle</code> interface instead.
	 */
	public static final String TABLE_NAME = "CPROPOSAL_recFormArticle";

	public static final Object[][] TABLE_COLUMNS = {
		{"formId", Types.BIGINT}, {"articleId", Types.BIGINT},
		{"articleStatus", Types.VARCHAR},
		{"articleReleaseSchedule", Types.VARCHAR},
		{"alternativeFormIds", Types.VARCHAR},
		{"articleImplementationDate", Types.TIMESTAMP},
		{"articleChangePath", Types.VARCHAR},
		{"articleResponsibleCommittee", Types.VARCHAR},
		{"articleImpactedParties", Types.VARCHAR},
		{"articleChangeCategory", Types.VARCHAR},
		{"articleImpacts", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("formId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("articleId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("articleStatus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("articleReleaseSchedule", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("alternativeFormIds", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("articleImplementationDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("articleChangePath", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("articleResponsibleCommittee", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("articleImpactedParties", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("articleChangeCategory", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("articleImpacts", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table CPROPOSAL_recFormArticle (formId LONG not null primary key,articleId LONG,articleStatus VARCHAR(75) null,articleReleaseSchedule VARCHAR(75) null,alternativeFormIds VARCHAR(75) null,articleImplementationDate DATE null,articleChangePath VARCHAR(75) null,articleResponsibleCommittee VARCHAR(75) null,articleImpactedParties VARCHAR(75) null,articleChangeCategory VARCHAR(75) null,articleImpacts VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table CPROPOSAL_recFormArticle";

	public static final String ORDER_BY_JPQL =
		" ORDER BY recFormArticle.formId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY CPROPOSAL_recFormArticle.formId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long ALTERNATIVEFORMIDS_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long ARTICLEID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long ARTICLERELEASESCHEDULE_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long ARTICLESTATUS_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long FORMID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static recFormArticle toModel(recFormArticleSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		recFormArticle model = new recFormArticleImpl();

		model.setFormId(soapModel.getFormId());
		model.setArticleId(soapModel.getArticleId());
		model.setArticleStatus(soapModel.getArticleStatus());
		model.setArticleReleaseSchedule(soapModel.getArticleReleaseSchedule());
		model.setAlternativeFormIds(soapModel.getAlternativeFormIds());
		model.setArticleImplementationDate(
			soapModel.getArticleImplementationDate());
		model.setArticleChangePath(soapModel.getArticleChangePath());
		model.setArticleResponsibleCommittee(
			soapModel.getArticleResponsibleCommittee());
		model.setArticleImpactedParties(soapModel.getArticleImpactedParties());
		model.setArticleChangeCategory(soapModel.getArticleChangeCategory());
		model.setArticleImpacts(soapModel.getArticleImpacts());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<recFormArticle> toModels(
		recFormArticleSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<recFormArticle> models = new ArrayList<recFormArticle>(
			soapModels.length);

		for (recFormArticleSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public recFormArticleModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _formId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFormId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _formId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return recFormArticle.class;
	}

	@Override
	public String getModelClassName() {
		return recFormArticle.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<recFormArticle, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<recFormArticle, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<recFormArticle, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((recFormArticle)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<recFormArticle, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<recFormArticle, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(recFormArticle)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<recFormArticle, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<recFormArticle, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, recFormArticle>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			recFormArticle.class.getClassLoader(), recFormArticle.class,
			ModelWrapper.class);

		try {
			Constructor<recFormArticle> constructor =
				(Constructor<recFormArticle>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<recFormArticle, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<recFormArticle, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<recFormArticle, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<recFormArticle, Object>>();
		Map<String, BiConsumer<recFormArticle, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<recFormArticle, ?>>();

		attributeGetterFunctions.put("formId", recFormArticle::getFormId);
		attributeSetterBiConsumers.put(
			"formId",
			(BiConsumer<recFormArticle, Long>)recFormArticle::setFormId);
		attributeGetterFunctions.put("articleId", recFormArticle::getArticleId);
		attributeSetterBiConsumers.put(
			"articleId",
			(BiConsumer<recFormArticle, Long>)recFormArticle::setArticleId);
		attributeGetterFunctions.put(
			"articleStatus", recFormArticle::getArticleStatus);
		attributeSetterBiConsumers.put(
			"articleStatus",
			(BiConsumer<recFormArticle, String>)
				recFormArticle::setArticleStatus);
		attributeGetterFunctions.put(
			"articleReleaseSchedule",
			recFormArticle::getArticleReleaseSchedule);
		attributeSetterBiConsumers.put(
			"articleReleaseSchedule",
			(BiConsumer<recFormArticle, String>)
				recFormArticle::setArticleReleaseSchedule);
		attributeGetterFunctions.put(
			"alternativeFormIds", recFormArticle::getAlternativeFormIds);
		attributeSetterBiConsumers.put(
			"alternativeFormIds",
			(BiConsumer<recFormArticle, String>)
				recFormArticle::setAlternativeFormIds);
		attributeGetterFunctions.put(
			"articleImplementationDate",
			recFormArticle::getArticleImplementationDate);
		attributeSetterBiConsumers.put(
			"articleImplementationDate",
			(BiConsumer<recFormArticle, Date>)
				recFormArticle::setArticleImplementationDate);
		attributeGetterFunctions.put(
			"articleChangePath", recFormArticle::getArticleChangePath);
		attributeSetterBiConsumers.put(
			"articleChangePath",
			(BiConsumer<recFormArticle, String>)
				recFormArticle::setArticleChangePath);
		attributeGetterFunctions.put(
			"articleResponsibleCommittee",
			recFormArticle::getArticleResponsibleCommittee);
		attributeSetterBiConsumers.put(
			"articleResponsibleCommittee",
			(BiConsumer<recFormArticle, String>)
				recFormArticle::setArticleResponsibleCommittee);
		attributeGetterFunctions.put(
			"articleImpactedParties",
			recFormArticle::getArticleImpactedParties);
		attributeSetterBiConsumers.put(
			"articleImpactedParties",
			(BiConsumer<recFormArticle, String>)
				recFormArticle::setArticleImpactedParties);
		attributeGetterFunctions.put(
			"articleChangeCategory", recFormArticle::getArticleChangeCategory);
		attributeSetterBiConsumers.put(
			"articleChangeCategory",
			(BiConsumer<recFormArticle, String>)
				recFormArticle::setArticleChangeCategory);
		attributeGetterFunctions.put(
			"articleImpacts", recFormArticle::getArticleImpacts);
		attributeSetterBiConsumers.put(
			"articleImpacts",
			(BiConsumer<recFormArticle, String>)
				recFormArticle::setArticleImpacts);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getFormId() {
		return _formId;
	}

	@Override
	public void setFormId(long formId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_formId = formId;
	}

	@JSON
	@Override
	public long getArticleId() {
		return _articleId;
	}

	@Override
	public void setArticleId(long articleId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_articleId = articleId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalArticleId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("articleId"));
	}

	@JSON
	@Override
	public String getArticleStatus() {
		if (_articleStatus == null) {
			return "";
		}
		else {
			return _articleStatus;
		}
	}

	@Override
	public void setArticleStatus(String articleStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_articleStatus = articleStatus;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalArticleStatus() {
		return getColumnOriginalValue("articleStatus");
	}

	@JSON
	@Override
	public String getArticleReleaseSchedule() {
		if (_articleReleaseSchedule == null) {
			return "";
		}
		else {
			return _articleReleaseSchedule;
		}
	}

	@Override
	public void setArticleReleaseSchedule(String articleReleaseSchedule) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_articleReleaseSchedule = articleReleaseSchedule;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalArticleReleaseSchedule() {
		return getColumnOriginalValue("articleReleaseSchedule");
	}

	@JSON
	@Override
	public String getAlternativeFormIds() {
		if (_alternativeFormIds == null) {
			return "";
		}
		else {
			return _alternativeFormIds;
		}
	}

	@Override
	public void setAlternativeFormIds(String alternativeFormIds) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_alternativeFormIds = alternativeFormIds;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalAlternativeFormIds() {
		return getColumnOriginalValue("alternativeFormIds");
	}

	@JSON
	@Override
	public Date getArticleImplementationDate() {
		return _articleImplementationDate;
	}

	@Override
	public void setArticleImplementationDate(Date articleImplementationDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_articleImplementationDate = articleImplementationDate;
	}

	@JSON
	@Override
	public String getArticleChangePath() {
		if (_articleChangePath == null) {
			return "";
		}
		else {
			return _articleChangePath;
		}
	}

	@Override
	public void setArticleChangePath(String articleChangePath) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_articleChangePath = articleChangePath;
	}

	@JSON
	@Override
	public String getArticleResponsibleCommittee() {
		if (_articleResponsibleCommittee == null) {
			return "";
		}
		else {
			return _articleResponsibleCommittee;
		}
	}

	@Override
	public void setArticleResponsibleCommittee(
		String articleResponsibleCommittee) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_articleResponsibleCommittee = articleResponsibleCommittee;
	}

	@JSON
	@Override
	public String getArticleImpactedParties() {
		if (_articleImpactedParties == null) {
			return "";
		}
		else {
			return _articleImpactedParties;
		}
	}

	@Override
	public void setArticleImpactedParties(String articleImpactedParties) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_articleImpactedParties = articleImpactedParties;
	}

	@JSON
	@Override
	public String getArticleChangeCategory() {
		if (_articleChangeCategory == null) {
			return "";
		}
		else {
			return _articleChangeCategory;
		}
	}

	@Override
	public void setArticleChangeCategory(String articleChangeCategory) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_articleChangeCategory = articleChangeCategory;
	}

	@JSON
	@Override
	public String getArticleImpacts() {
		if (_articleImpacts == null) {
			return "";
		}
		else {
			return _articleImpacts;
		}
	}

	@Override
	public void setArticleImpacts(String articleImpacts) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_articleImpacts = articleImpacts;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, recFormArticle.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public recFormArticle toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, recFormArticle>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		recFormArticleImpl recFormArticleImpl = new recFormArticleImpl();

		recFormArticleImpl.setFormId(getFormId());
		recFormArticleImpl.setArticleId(getArticleId());
		recFormArticleImpl.setArticleStatus(getArticleStatus());
		recFormArticleImpl.setArticleReleaseSchedule(
			getArticleReleaseSchedule());
		recFormArticleImpl.setAlternativeFormIds(getAlternativeFormIds());
		recFormArticleImpl.setArticleImplementationDate(
			getArticleImplementationDate());
		recFormArticleImpl.setArticleChangePath(getArticleChangePath());
		recFormArticleImpl.setArticleResponsibleCommittee(
			getArticleResponsibleCommittee());
		recFormArticleImpl.setArticleImpactedParties(
			getArticleImpactedParties());
		recFormArticleImpl.setArticleChangeCategory(getArticleChangeCategory());
		recFormArticleImpl.setArticleImpacts(getArticleImpacts());

		recFormArticleImpl.resetOriginalValues();

		return recFormArticleImpl;
	}

	@Override
	public int compareTo(recFormArticle recFormArticle) {
		long primaryKey = recFormArticle.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof recFormArticle)) {
			return false;
		}

		recFormArticle recFormArticle = (recFormArticle)object;

		long primaryKey = recFormArticle.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<recFormArticle> toCacheModel() {
		recFormArticleCacheModel recFormArticleCacheModel =
			new recFormArticleCacheModel();

		recFormArticleCacheModel.formId = getFormId();

		recFormArticleCacheModel.articleId = getArticleId();

		recFormArticleCacheModel.articleStatus = getArticleStatus();

		String articleStatus = recFormArticleCacheModel.articleStatus;

		if ((articleStatus != null) && (articleStatus.length() == 0)) {
			recFormArticleCacheModel.articleStatus = null;
		}

		recFormArticleCacheModel.articleReleaseSchedule =
			getArticleReleaseSchedule();

		String articleReleaseSchedule =
			recFormArticleCacheModel.articleReleaseSchedule;

		if ((articleReleaseSchedule != null) &&
			(articleReleaseSchedule.length() == 0)) {

			recFormArticleCacheModel.articleReleaseSchedule = null;
		}

		recFormArticleCacheModel.alternativeFormIds = getAlternativeFormIds();

		String alternativeFormIds = recFormArticleCacheModel.alternativeFormIds;

		if ((alternativeFormIds != null) &&
			(alternativeFormIds.length() == 0)) {

			recFormArticleCacheModel.alternativeFormIds = null;
		}

		Date articleImplementationDate = getArticleImplementationDate();

		if (articleImplementationDate != null) {
			recFormArticleCacheModel.articleImplementationDate =
				articleImplementationDate.getTime();
		}
		else {
			recFormArticleCacheModel.articleImplementationDate = Long.MIN_VALUE;
		}

		recFormArticleCacheModel.articleChangePath = getArticleChangePath();

		String articleChangePath = recFormArticleCacheModel.articleChangePath;

		if ((articleChangePath != null) && (articleChangePath.length() == 0)) {
			recFormArticleCacheModel.articleChangePath = null;
		}

		recFormArticleCacheModel.articleResponsibleCommittee =
			getArticleResponsibleCommittee();

		String articleResponsibleCommittee =
			recFormArticleCacheModel.articleResponsibleCommittee;

		if ((articleResponsibleCommittee != null) &&
			(articleResponsibleCommittee.length() == 0)) {

			recFormArticleCacheModel.articleResponsibleCommittee = null;
		}

		recFormArticleCacheModel.articleImpactedParties =
			getArticleImpactedParties();

		String articleImpactedParties =
			recFormArticleCacheModel.articleImpactedParties;

		if ((articleImpactedParties != null) &&
			(articleImpactedParties.length() == 0)) {

			recFormArticleCacheModel.articleImpactedParties = null;
		}

		recFormArticleCacheModel.articleChangeCategory =
			getArticleChangeCategory();

		String articleChangeCategory =
			recFormArticleCacheModel.articleChangeCategory;

		if ((articleChangeCategory != null) &&
			(articleChangeCategory.length() == 0)) {

			recFormArticleCacheModel.articleChangeCategory = null;
		}

		recFormArticleCacheModel.articleImpacts = getArticleImpacts();

		String articleImpacts = recFormArticleCacheModel.articleImpacts;

		if ((articleImpacts != null) && (articleImpacts.length() == 0)) {
			recFormArticleCacheModel.articleImpacts = null;
		}

		return recFormArticleCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<recFormArticle, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<recFormArticle, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<recFormArticle, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((recFormArticle)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<recFormArticle, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<recFormArticle, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<recFormArticle, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((recFormArticle)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, recFormArticle>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _formId;
	private long _articleId;
	private String _articleStatus;
	private String _articleReleaseSchedule;
	private String _alternativeFormIds;
	private Date _articleImplementationDate;
	private String _articleChangePath;
	private String _articleResponsibleCommittee;
	private String _articleImpactedParties;
	private String _articleChangeCategory;
	private String _articleImpacts;

	public <T> T getColumnValue(String columnName) {
		Function<recFormArticle, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((recFormArticle)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("formId", _formId);
		_columnOriginalValues.put("articleId", _articleId);
		_columnOriginalValues.put("articleStatus", _articleStatus);
		_columnOriginalValues.put(
			"articleReleaseSchedule", _articleReleaseSchedule);
		_columnOriginalValues.put("alternativeFormIds", _alternativeFormIds);
		_columnOriginalValues.put(
			"articleImplementationDate", _articleImplementationDate);
		_columnOriginalValues.put("articleChangePath", _articleChangePath);
		_columnOriginalValues.put(
			"articleResponsibleCommittee", _articleResponsibleCommittee);
		_columnOriginalValues.put(
			"articleImpactedParties", _articleImpactedParties);
		_columnOriginalValues.put(
			"articleChangeCategory", _articleChangeCategory);
		_columnOriginalValues.put("articleImpacts", _articleImpacts);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("formId", 1L);

		columnBitmasks.put("articleId", 2L);

		columnBitmasks.put("articleStatus", 4L);

		columnBitmasks.put("articleReleaseSchedule", 8L);

		columnBitmasks.put("alternativeFormIds", 16L);

		columnBitmasks.put("articleImplementationDate", 32L);

		columnBitmasks.put("articleChangePath", 64L);

		columnBitmasks.put("articleResponsibleCommittee", 128L);

		columnBitmasks.put("articleImpactedParties", 256L);

		columnBitmasks.put("articleChangeCategory", 512L);

		columnBitmasks.put("articleImpacts", 1024L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private recFormArticle _escapedModel;

}