/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package rec.everis.forms.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import rec.everis.forms.service.model.MaintenanceActivityForms;
import rec.everis.forms.service.model.MaintenanceActivityFormsModel;
import rec.everis.forms.service.model.MaintenanceActivityFormsSoap;

/**
 * The base model implementation for the MaintenanceActivityForms service. Represents a row in the &quot;AMAF_MaintenanceActivityForms&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>MaintenanceActivityFormsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MaintenanceActivityFormsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see MaintenanceActivityFormsImpl
 * @generated
 */
@JSON(strict = true)
public class MaintenanceActivityFormsModelImpl
	extends BaseModelImpl<MaintenanceActivityForms>
	implements MaintenanceActivityFormsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a maintenance activity forms model instance should use the <code>MaintenanceActivityForms</code> interface instead.
	 */
	public static final String TABLE_NAME = "AMAF_MaintenanceActivityForms";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"maintenanceactivityformId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"formType", Types.VARCHAR}, {"year", Types.INTEGER},
		{"submitDate", Types.TIMESTAMP}, {"approvalDate", Types.TIMESTAMP},
		{"submitDateFormatted", Types.VARCHAR},
		{"approvalDateFormatted", Types.VARCHAR}, {"status", Types.VARCHAR},
		{"formInstanceRecordVersionId", Types.BIGINT},
		{"orgSiteId", Types.BIGINT}, {"viewUrl", Types.VARCHAR},
		{"formInstanceId", Types.BIGINT}, {"formInstanceRecordId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("maintenanceactivityformId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("formType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("year", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("submitDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("approvalDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("submitDateFormatted", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("approvalDateFormatted", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("formInstanceRecordVersionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("orgSiteId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("viewUrl", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("formInstanceId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("formInstanceRecordId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table AMAF_MaintenanceActivityForms (uuid_ VARCHAR(75) null,maintenanceactivityformId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,formType VARCHAR(500) null,year INTEGER,submitDate DATE null,approvalDate DATE null,submitDateFormatted VARCHAR(75) null,approvalDateFormatted VARCHAR(75) null,status VARCHAR(75) null,formInstanceRecordVersionId LONG,orgSiteId LONG,viewUrl VARCHAR(2500) null,formInstanceId LONG,formInstanceRecordId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table AMAF_MaintenanceActivityForms";

	public static final String ORDER_BY_JPQL =
		" ORDER BY maintenanceActivityForms.submitDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY AMAF_MaintenanceActivityForms.submitDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long FORMINSTANCERECORDVERSIONID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long SUBMITDATE_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static MaintenanceActivityForms toModel(
		MaintenanceActivityFormsSoap soapModel) {

		if (soapModel == null) {
			return null;
		}

		MaintenanceActivityForms model = new MaintenanceActivityFormsImpl();

		model.setUuid(soapModel.getUuid());
		model.setMaintenanceactivityformId(
			soapModel.getMaintenanceactivityformId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setFormType(soapModel.getFormType());
		model.setYear(soapModel.getYear());
		model.setSubmitDate(soapModel.getSubmitDate());
		model.setApprovalDate(soapModel.getApprovalDate());
		model.setSubmitDateFormatted(soapModel.getSubmitDateFormatted());
		model.setApprovalDateFormatted(soapModel.getApprovalDateFormatted());
		model.setStatus(soapModel.getStatus());
		model.setFormInstanceRecordVersionId(
			soapModel.getFormInstanceRecordVersionId());
		model.setOrgSiteId(soapModel.getOrgSiteId());
		model.setViewUrl(soapModel.getViewUrl());
		model.setFormInstanceId(soapModel.getFormInstanceId());
		model.setFormInstanceRecordId(soapModel.getFormInstanceRecordId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<MaintenanceActivityForms> toModels(
		MaintenanceActivityFormsSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<MaintenanceActivityForms> models =
			new ArrayList<MaintenanceActivityForms>(soapModels.length);

		for (MaintenanceActivityFormsSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public MaintenanceActivityFormsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _maintenanceactivityformId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMaintenanceactivityformId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _maintenanceactivityformId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MaintenanceActivityForms.class;
	}

	@Override
	public String getModelClassName() {
		return MaintenanceActivityForms.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<MaintenanceActivityForms, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<MaintenanceActivityForms, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MaintenanceActivityForms, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((MaintenanceActivityForms)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<MaintenanceActivityForms, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<MaintenanceActivityForms, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(MaintenanceActivityForms)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<MaintenanceActivityForms, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<MaintenanceActivityForms, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, MaintenanceActivityForms>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			MaintenanceActivityForms.class.getClassLoader(),
			MaintenanceActivityForms.class, ModelWrapper.class);

		try {
			Constructor<MaintenanceActivityForms> constructor =
				(Constructor<MaintenanceActivityForms>)
					proxyClass.getConstructor(InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<MaintenanceActivityForms, Object>>
		_attributeGetterFunctions;
	private static final Map
		<String, BiConsumer<MaintenanceActivityForms, Object>>
			_attributeSetterBiConsumers;

	static {
		Map<String, Function<MaintenanceActivityForms, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<MaintenanceActivityForms, Object>>();
		Map<String, BiConsumer<MaintenanceActivityForms, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<MaintenanceActivityForms, ?>>();

		attributeGetterFunctions.put("uuid", MaintenanceActivityForms::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<MaintenanceActivityForms, String>)
				MaintenanceActivityForms::setUuid);
		attributeGetterFunctions.put(
			"maintenanceactivityformId",
			MaintenanceActivityForms::getMaintenanceactivityformId);
		attributeSetterBiConsumers.put(
			"maintenanceactivityformId",
			(BiConsumer<MaintenanceActivityForms, Long>)
				MaintenanceActivityForms::setMaintenanceactivityformId);
		attributeGetterFunctions.put(
			"groupId", MaintenanceActivityForms::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<MaintenanceActivityForms, Long>)
				MaintenanceActivityForms::setGroupId);
		attributeGetterFunctions.put(
			"companyId", MaintenanceActivityForms::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<MaintenanceActivityForms, Long>)
				MaintenanceActivityForms::setCompanyId);
		attributeGetterFunctions.put(
			"userId", MaintenanceActivityForms::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<MaintenanceActivityForms, Long>)
				MaintenanceActivityForms::setUserId);
		attributeGetterFunctions.put(
			"userName", MaintenanceActivityForms::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<MaintenanceActivityForms, String>)
				MaintenanceActivityForms::setUserName);
		attributeGetterFunctions.put(
			"createDate", MaintenanceActivityForms::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<MaintenanceActivityForms, Date>)
				MaintenanceActivityForms::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", MaintenanceActivityForms::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<MaintenanceActivityForms, Date>)
				MaintenanceActivityForms::setModifiedDate);
		attributeGetterFunctions.put(
			"formType", MaintenanceActivityForms::getFormType);
		attributeSetterBiConsumers.put(
			"formType",
			(BiConsumer<MaintenanceActivityForms, String>)
				MaintenanceActivityForms::setFormType);
		attributeGetterFunctions.put("year", MaintenanceActivityForms::getYear);
		attributeSetterBiConsumers.put(
			"year",
			(BiConsumer<MaintenanceActivityForms, Integer>)
				MaintenanceActivityForms::setYear);
		attributeGetterFunctions.put(
			"submitDate", MaintenanceActivityForms::getSubmitDate);
		attributeSetterBiConsumers.put(
			"submitDate",
			(BiConsumer<MaintenanceActivityForms, Date>)
				MaintenanceActivityForms::setSubmitDate);
		attributeGetterFunctions.put(
			"approvalDate", MaintenanceActivityForms::getApprovalDate);
		attributeSetterBiConsumers.put(
			"approvalDate",
			(BiConsumer<MaintenanceActivityForms, Date>)
				MaintenanceActivityForms::setApprovalDate);
		attributeGetterFunctions.put(
			"submitDateFormatted",
			MaintenanceActivityForms::getSubmitDateFormatted);
		attributeSetterBiConsumers.put(
			"submitDateFormatted",
			(BiConsumer<MaintenanceActivityForms, String>)
				MaintenanceActivityForms::setSubmitDateFormatted);
		attributeGetterFunctions.put(
			"approvalDateFormatted",
			MaintenanceActivityForms::getApprovalDateFormatted);
		attributeSetterBiConsumers.put(
			"approvalDateFormatted",
			(BiConsumer<MaintenanceActivityForms, String>)
				MaintenanceActivityForms::setApprovalDateFormatted);
		attributeGetterFunctions.put(
			"status", MaintenanceActivityForms::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<MaintenanceActivityForms, String>)
				MaintenanceActivityForms::setStatus);
		attributeGetterFunctions.put(
			"formInstanceRecordVersionId",
			MaintenanceActivityForms::getFormInstanceRecordVersionId);
		attributeSetterBiConsumers.put(
			"formInstanceRecordVersionId",
			(BiConsumer<MaintenanceActivityForms, Long>)
				MaintenanceActivityForms::setFormInstanceRecordVersionId);
		attributeGetterFunctions.put(
			"orgSiteId", MaintenanceActivityForms::getOrgSiteId);
		attributeSetterBiConsumers.put(
			"orgSiteId",
			(BiConsumer<MaintenanceActivityForms, Long>)
				MaintenanceActivityForms::setOrgSiteId);
		attributeGetterFunctions.put(
			"viewUrl", MaintenanceActivityForms::getViewUrl);
		attributeSetterBiConsumers.put(
			"viewUrl",
			(BiConsumer<MaintenanceActivityForms, String>)
				MaintenanceActivityForms::setViewUrl);
		attributeGetterFunctions.put(
			"formInstanceId", MaintenanceActivityForms::getFormInstanceId);
		attributeSetterBiConsumers.put(
			"formInstanceId",
			(BiConsumer<MaintenanceActivityForms, Long>)
				MaintenanceActivityForms::setFormInstanceId);
		attributeGetterFunctions.put(
			"formInstanceRecordId",
			MaintenanceActivityForms::getFormInstanceRecordId);
		attributeSetterBiConsumers.put(
			"formInstanceRecordId",
			(BiConsumer<MaintenanceActivityForms, Long>)
				MaintenanceActivityForms::setFormInstanceRecordId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getMaintenanceactivityformId() {
		return _maintenanceactivityformId;
	}

	@Override
	public void setMaintenanceactivityformId(long maintenanceactivityformId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_maintenanceactivityformId = maintenanceactivityformId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getFormType() {
		if (_formType == null) {
			return "";
		}
		else {
			return _formType;
		}
	}

	@Override
	public void setFormType(String formType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_formType = formType;
	}

	@JSON
	@Override
	public int getYear() {
		return _year;
	}

	@Override
	public void setYear(int year) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_year = year;
	}

	@JSON
	@Override
	public Date getSubmitDate() {
		return _submitDate;
	}

	@Override
	public void setSubmitDate(Date submitDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_submitDate = submitDate;
	}

	@JSON
	@Override
	public Date getApprovalDate() {
		return _approvalDate;
	}

	@Override
	public void setApprovalDate(Date approvalDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_approvalDate = approvalDate;
	}

	@JSON
	@Override
	public String getSubmitDateFormatted() {
		if (_submitDateFormatted == null) {
			return "";
		}
		else {
			return _submitDateFormatted;
		}
	}

	@Override
	public void setSubmitDateFormatted(String submitDateFormatted) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_submitDateFormatted = submitDateFormatted;
	}

	@JSON
	@Override
	public String getApprovalDateFormatted() {
		if (_approvalDateFormatted == null) {
			return "";
		}
		else {
			return _approvalDateFormatted;
		}
	}

	@Override
	public void setApprovalDateFormatted(String approvalDateFormatted) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_approvalDateFormatted = approvalDateFormatted;
	}

	@JSON
	@Override
	public String getStatus() {
		if (_status == null) {
			return "";
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@JSON
	@Override
	public long getFormInstanceRecordVersionId() {
		return _formInstanceRecordVersionId;
	}

	@Override
	public void setFormInstanceRecordVersionId(
		long formInstanceRecordVersionId) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_formInstanceRecordVersionId = formInstanceRecordVersionId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalFormInstanceRecordVersionId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("formInstanceRecordVersionId"));
	}

	@JSON
	@Override
	public long getOrgSiteId() {
		return _orgSiteId;
	}

	@Override
	public void setOrgSiteId(long orgSiteId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_orgSiteId = orgSiteId;
	}

	@JSON
	@Override
	public String getViewUrl() {
		if (_viewUrl == null) {
			return "";
		}
		else {
			return _viewUrl;
		}
	}

	@Override
	public void setViewUrl(String viewUrl) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_viewUrl = viewUrl;
	}

	@JSON
	@Override
	public long getFormInstanceId() {
		return _formInstanceId;
	}

	@Override
	public void setFormInstanceId(long formInstanceId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_formInstanceId = formInstanceId;
	}

	@JSON
	@Override
	public long getFormInstanceRecordId() {
		return _formInstanceRecordId;
	}

	@Override
	public void setFormInstanceRecordId(long formInstanceRecordId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_formInstanceRecordId = formInstanceRecordId;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(
				MaintenanceActivityForms.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), MaintenanceActivityForms.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MaintenanceActivityForms toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, MaintenanceActivityForms>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MaintenanceActivityFormsImpl maintenanceActivityFormsImpl =
			new MaintenanceActivityFormsImpl();

		maintenanceActivityFormsImpl.setUuid(getUuid());
		maintenanceActivityFormsImpl.setMaintenanceactivityformId(
			getMaintenanceactivityformId());
		maintenanceActivityFormsImpl.setGroupId(getGroupId());
		maintenanceActivityFormsImpl.setCompanyId(getCompanyId());
		maintenanceActivityFormsImpl.setUserId(getUserId());
		maintenanceActivityFormsImpl.setUserName(getUserName());
		maintenanceActivityFormsImpl.setCreateDate(getCreateDate());
		maintenanceActivityFormsImpl.setModifiedDate(getModifiedDate());
		maintenanceActivityFormsImpl.setFormType(getFormType());
		maintenanceActivityFormsImpl.setYear(getYear());
		maintenanceActivityFormsImpl.setSubmitDate(getSubmitDate());
		maintenanceActivityFormsImpl.setApprovalDate(getApprovalDate());
		maintenanceActivityFormsImpl.setSubmitDateFormatted(
			getSubmitDateFormatted());
		maintenanceActivityFormsImpl.setApprovalDateFormatted(
			getApprovalDateFormatted());
		maintenanceActivityFormsImpl.setStatus(getStatus());
		maintenanceActivityFormsImpl.setFormInstanceRecordVersionId(
			getFormInstanceRecordVersionId());
		maintenanceActivityFormsImpl.setOrgSiteId(getOrgSiteId());
		maintenanceActivityFormsImpl.setViewUrl(getViewUrl());
		maintenanceActivityFormsImpl.setFormInstanceId(getFormInstanceId());
		maintenanceActivityFormsImpl.setFormInstanceRecordId(
			getFormInstanceRecordId());

		maintenanceActivityFormsImpl.resetOriginalValues();

		return maintenanceActivityFormsImpl;
	}

	@Override
	public int compareTo(MaintenanceActivityForms maintenanceActivityForms) {
		int value = 0;

		value = DateUtil.compareTo(
			getSubmitDate(), maintenanceActivityForms.getSubmitDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof MaintenanceActivityForms)) {
			return false;
		}

		MaintenanceActivityForms maintenanceActivityForms =
			(MaintenanceActivityForms)object;

		long primaryKey = maintenanceActivityForms.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<MaintenanceActivityForms> toCacheModel() {
		MaintenanceActivityFormsCacheModel maintenanceActivityFormsCacheModel =
			new MaintenanceActivityFormsCacheModel();

		maintenanceActivityFormsCacheModel.uuid = getUuid();

		String uuid = maintenanceActivityFormsCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			maintenanceActivityFormsCacheModel.uuid = null;
		}

		maintenanceActivityFormsCacheModel.maintenanceactivityformId =
			getMaintenanceactivityformId();

		maintenanceActivityFormsCacheModel.groupId = getGroupId();

		maintenanceActivityFormsCacheModel.companyId = getCompanyId();

		maintenanceActivityFormsCacheModel.userId = getUserId();

		maintenanceActivityFormsCacheModel.userName = getUserName();

		String userName = maintenanceActivityFormsCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			maintenanceActivityFormsCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			maintenanceActivityFormsCacheModel.createDate =
				createDate.getTime();
		}
		else {
			maintenanceActivityFormsCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			maintenanceActivityFormsCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			maintenanceActivityFormsCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		maintenanceActivityFormsCacheModel.formType = getFormType();

		String formType = maintenanceActivityFormsCacheModel.formType;

		if ((formType != null) && (formType.length() == 0)) {
			maintenanceActivityFormsCacheModel.formType = null;
		}

		maintenanceActivityFormsCacheModel.year = getYear();

		Date submitDate = getSubmitDate();

		if (submitDate != null) {
			maintenanceActivityFormsCacheModel.submitDate =
				submitDate.getTime();
		}
		else {
			maintenanceActivityFormsCacheModel.submitDate = Long.MIN_VALUE;
		}

		Date approvalDate = getApprovalDate();

		if (approvalDate != null) {
			maintenanceActivityFormsCacheModel.approvalDate =
				approvalDate.getTime();
		}
		else {
			maintenanceActivityFormsCacheModel.approvalDate = Long.MIN_VALUE;
		}

		maintenanceActivityFormsCacheModel.submitDateFormatted =
			getSubmitDateFormatted();

		String submitDateFormatted =
			maintenanceActivityFormsCacheModel.submitDateFormatted;

		if ((submitDateFormatted != null) &&
			(submitDateFormatted.length() == 0)) {

			maintenanceActivityFormsCacheModel.submitDateFormatted = null;
		}

		maintenanceActivityFormsCacheModel.approvalDateFormatted =
			getApprovalDateFormatted();

		String approvalDateFormatted =
			maintenanceActivityFormsCacheModel.approvalDateFormatted;

		if ((approvalDateFormatted != null) &&
			(approvalDateFormatted.length() == 0)) {

			maintenanceActivityFormsCacheModel.approvalDateFormatted = null;
		}

		maintenanceActivityFormsCacheModel.status = getStatus();

		String status = maintenanceActivityFormsCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			maintenanceActivityFormsCacheModel.status = null;
		}

		maintenanceActivityFormsCacheModel.formInstanceRecordVersionId =
			getFormInstanceRecordVersionId();

		maintenanceActivityFormsCacheModel.orgSiteId = getOrgSiteId();

		maintenanceActivityFormsCacheModel.viewUrl = getViewUrl();

		String viewUrl = maintenanceActivityFormsCacheModel.viewUrl;

		if ((viewUrl != null) && (viewUrl.length() == 0)) {
			maintenanceActivityFormsCacheModel.viewUrl = null;
		}

		maintenanceActivityFormsCacheModel.formInstanceId = getFormInstanceId();

		maintenanceActivityFormsCacheModel.formInstanceRecordId =
			getFormInstanceRecordId();

		return maintenanceActivityFormsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<MaintenanceActivityForms, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<MaintenanceActivityForms, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MaintenanceActivityForms, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(
				attributeGetterFunction.apply((MaintenanceActivityForms)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<MaintenanceActivityForms, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<MaintenanceActivityForms, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MaintenanceActivityForms, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply((MaintenanceActivityForms)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, MaintenanceActivityForms>
				_escapedModelProxyProviderFunction =
					_getProxyProviderFunction();

	}

	private String _uuid;
	private long _maintenanceactivityformId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _formType;
	private int _year;
	private Date _submitDate;
	private Date _approvalDate;
	private String _submitDateFormatted;
	private String _approvalDateFormatted;
	private String _status;
	private long _formInstanceRecordVersionId;
	private long _orgSiteId;
	private String _viewUrl;
	private long _formInstanceId;
	private long _formInstanceRecordId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<MaintenanceActivityForms, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((MaintenanceActivityForms)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put(
			"maintenanceactivityformId", _maintenanceactivityformId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("formType", _formType);
		_columnOriginalValues.put("year", _year);
		_columnOriginalValues.put("submitDate", _submitDate);
		_columnOriginalValues.put("approvalDate", _approvalDate);
		_columnOriginalValues.put("submitDateFormatted", _submitDateFormatted);
		_columnOriginalValues.put(
			"approvalDateFormatted", _approvalDateFormatted);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put(
			"formInstanceRecordVersionId", _formInstanceRecordVersionId);
		_columnOriginalValues.put("orgSiteId", _orgSiteId);
		_columnOriginalValues.put("viewUrl", _viewUrl);
		_columnOriginalValues.put("formInstanceId", _formInstanceId);
		_columnOriginalValues.put(
			"formInstanceRecordId", _formInstanceRecordId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("maintenanceactivityformId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("formType", 256L);

		columnBitmasks.put("year", 512L);

		columnBitmasks.put("submitDate", 1024L);

		columnBitmasks.put("approvalDate", 2048L);

		columnBitmasks.put("submitDateFormatted", 4096L);

		columnBitmasks.put("approvalDateFormatted", 8192L);

		columnBitmasks.put("status", 16384L);

		columnBitmasks.put("formInstanceRecordVersionId", 32768L);

		columnBitmasks.put("orgSiteId", 65536L);

		columnBitmasks.put("viewUrl", 131072L);

		columnBitmasks.put("formInstanceId", 262144L);

		columnBitmasks.put("formInstanceRecordId", 524288L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private MaintenanceActivityForms _escapedModel;

}